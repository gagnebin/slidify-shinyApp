tables[[2]]
tables[[3]]
as.data.frame(tables[[1]])
df2 = as.data.frame(tables[[2]])
df2
View(df2)
df1 = as.data.frame(tables[[1]])
View(df1)
View(df1)
View(df2)
View(df2)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
sessionInfo()
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
summary(AlzheimerDisease)
data(AlzheimerDisease)
View(predictors)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
diagnosis
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
set.seed(1000)
concrete
View(mixtures)
View(concrete)
View(mixtures)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
histo(training$SuperPlasticizer)
hist(training$SuperPlasticizer)
summary(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
log(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("IL", training)
View(training)
grep("IL", colnames(training))
?subset
sub <- subset(training, grep("IL", colnames(training))
)
sub <- subset(training, select = grep("IL", colnames(training)))
sub
preProc <- preProcess(log10(sub+1)), metod="pca")
preProc <- preProcess(log10(sub+1)), method="pca")
preProc <- preProcess(log10(sub+1), method="pca")
summary(sub)
sub <- subset(training, select = grep("^IL", colnames(training)))
summary(sub)
preProc <- preProcess(log10(sub+1), method="pca")
preProc <- preProcess(sub, method="pca")
predict(preProc, sub)
PC <- predict(preProc, sub)
summary(PC)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
sub <- subset(training, select = grep("^IL", colnames(training)))
preProc <- preProcess(sub, method="pca")
PC <- predict(preProc, sub)
summary(PC)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
sub <- subset(training, select = grep("^IL", colnames(training)))
preProc <- preProcess(log10(sub+1), method="pca")
PC <- predict(preProc, log10(sub+1))
summary(PC)
trainPC <- predict(preProc, sub)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
sub <- subset(training, select = grep("^IL", colnames(training)))
preProc <- preProcess(sub, method="pca")
trainPC <- predict(preProc, sub)
subtest <- subset(testing, select = grep("^IL", colnames(testing)))
testPC <- predict(preProc, subtest)
View(testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
sub <- subset(training, select = grep("^IL", colnames(training)))
subtest <- subset(testing, select = grep("^IL", colnames(testing)))
preProc <- preProcess(sub, method="pca")
trainPC <- predict(preProc, sub)
modelFit <- train(training$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest)
confusionMatrix(testing$diagnosis, predict())
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = grep("^IL", colnames(training)))
subtest <- subset(testing, select = grep("^IL", colnames(testing)))
preProc <- preProcess(subtrain, method="pca", pcaComp = 2)
trainPC <- predict(preProc, sub)
modelFit <- train(training$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = grep("^IL", colnames(training)))
subtest <- subset(testing, select = grep("^IL", colnames(testing)))
preProc <- preProcess(subtrain, method="pca", pcaComp = 9)
trainPC <- predict(preProc, sub)
modelFit <- train(training$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = grep("^IL", colnames(training)))
subtest <- subset(testing, select = grep("^IL", colnames(testing)))
preProc <- preProcess(subtrain, method="pca", pcaComp = 11)
trainPC <- predict(preProc, sub)
modelFit <- train(training$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = grep("^IL", colnames(training)))
subtest <- subset(testing, select = grep("^IL", colnames(testing)))
preProc <- preProcess(subtrain, method="pca", pcaComp = 7)
trainPC <- predict(preProc, sub)
modelFit <- train(training$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = grep("^IL", colnames(training)))
subtest <- subset(testing, select = grep("^IL", colnames(testing)))
preProc <- preProcess(subtrain, method="pca", pcaComp = 8)
trainPC <- predict(preProc, sub)
modelFit <- train(training$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
View(subtrain)
preProc
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = grep("^IL", colnames(training)))
subtest <- subset(testing, select = grep("^IL", colnames(testing)))
preProc <- preProcess(subtrain, method="pca", pcaComp = 8)
trainPC <- predict(preProc, subtrain)
trainPC
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c("diagnostics, "grep("^IL", colnames(training))))
subtrain <- subset(training, select = c("diagnostics, grep("^IL", colnames(training))))
)
)
subtrain <- subset(training, select = c("diagnostics", grep("^IL", colnames(training))))
subtrain <- subset(training, select = c("diagnosis", grep("^IL", colnames(training))))
View(training)
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
View(testing)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain, method="pca", pcaComp = 9)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 9)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 11)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 8)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 7)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 11)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 9)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
prComp$rotation
prComp<-prcomp(subtrain[-1,])
prComp<-prcomp(subtrain[,-1])
prComp$rotation
modelFit <- train(subtrain$diagnosis~., method="glm", preProcess="pca", data = subtrain)
confusionMatrix(subtest$diagnosis, predict(modelFit, subtest))
modelFit
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 9)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
modelFit
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 11)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
modelFit
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 8)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
modelFit
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
set.seed(3433)
data(AlzheimerDisease)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
adData = data.frame(diagnosis,predictors)
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 7)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
modelFit
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
modelFit1 <- train(subtrain$diagnosis~., method="glm", preProcess="pca", data = subtrain)
confusionMatrix(subtest$diagnosis, predict(modelFit1, subtest))
modelFit2 <- train(subtrain$diagnosis~., method="glm", preProcess="pca", data = subtrain)
confusionMatrix(subtest$diagnosis, predict(modelFit2, subtest))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 4)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 5)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", pcaComp = 6)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(subtrain[,-1], method="pca", thresh = 0.9)
preProc$rotation
?train
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", thresh = 0.8)
modelFit1 <- train(subtrain$diagnosis~., method="glm", preProcess=preProc, data = subtrain)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", thresh = 0.9)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- subset(training, select = c(1, grep("^IL", colnames(training))))
subtest <- subset(testing, select = c(1, grep("^IL", colnames(testing))))
preProc <- preProcess(subtrain[,-1], method="pca", thresh = 0.8)
trainPC <- predict(preProc, subtrain[,-1])
modelFit <- train(subtrain$diagnosis~., method="glm", data = trainPC)
testPC <- predict(preProc, subtest[,-1])
confusionMatrix(subtest$diagnosis, predict(modelFit, testPC))
modelFit2 <- train(subtrain$diagnosis~., method="glm", data = subtrain)
confusionMatrix(subtest$diagnosis, predict(modelFit2, subtest))
source('D:/Mes_Documents/R/edmonton/edmonton_shp.R', echo=TRUE)
a = c(1,2,3,4)
q()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
View(myPlot)
View(myPlot)
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
utils:::menuInstallPkgs()
require(devtools)
utils:::menuInstallPkgs()
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
q()
library(shiny)
shiny::runApp('D:/Mes_Documents/coursera/products/082-word-cloud_modif')
shiny::runApp('D:/Mes_Documents/coursera/products/082-word-cloud_modif')
shiny::runApp('D:/Mes_Documents/coursera/products/082-word-cloud_modif')
shiny::runApp('D:/Mes_Documents/coursera/products/082-word-cloud_modif')
shiny::runApp('D:/Mes_Documents/coursera/products/082-word-cloud_modif')
library(shiny)
shiny::runApp('D:/Mes_Documents/coursera/products/projectApp')
shiny::runApp('D:/Mes_Documents/coursera/products/projectApp')
shiny::runApp('D:/Mes_Documents/coursera/products/projectApp')
shiny::runApp('D:/Mes_Documents/coursera/products/projectApp')
shiny::runApp('D:/Mes_Documents/coursera/products/projectApp')
shiny::runApp('D:/Mes_Documents/coursera/products/projectApp')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='solange', token='116E382E0BDA2751E3ADB551338737C6', secret='Ulo8hivR3ZinRXz/Zi21WTB/q30TQHqFnEiKnbU4')
shiny::runApp('D:/Mes_Documents/coursera/products/projectApp')
shinyapps::deployApp('D:/Mes_Documents/coursera/products/projectApp')
44+81+88+159
?readLines
library(tm)
library(qdap)
library(wordcloud)
setwd("D:/Mes_Documents/coursera/products/082-word-cloud_modif")
load("special3.RData")
i
mytext <- readLines("new-plan-for-a-strong-middle-class.txt", encoding="UTF-8", skipNul = TRUE, n= 50)
mytext <- readLines("liberal.txt", encoding="UTF-8", skipNul = TRUE, n= 50)
docs <- tm_map(docs, content_transformer(tolower))
docs <- Corpus(VectorSource(mytext))
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removePunctuation)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
v
d <- data.frame(word = names(v),freq=v)
head(d, 10)
setwd("D:/Mes_Documents/coursera/products/project_slidify/shinyApp_slidify")
docs <- tm_map(docs, removeWords, c(stopwords("english"), "canadians"))
source('D:/Mes_Documents/coursera/products/082-word-cloud_modif/miniplan.R', echo=TRUE)
source('D:/Mes_Documents/coursera/products/082-word-cloud_modif/miniplan.R', echo=TRUE)
source('D:/Mes_Documents/coursera/products/082-word-cloud_modif/miniplan.R', echo=TRUE)
source('D:/Mes_Documents/coursera/products/082-word-cloud_modif/miniplan.R', echo=TRUE)
